extends layout

block content
  head
    title Generación de Orden de Trabajo

  body
    .container
      h1(class="margin-top-custom") Generación de Orden de Trabajo

      form#generar-orden-form(action="/orden/generacion-orden" method="POST")
        .form-group
          label(for="paciente") Paciente:
          input#pacienteSearch.form-control(type="text" placeholder="Buscar paciente...")
          #pacienteResults
          input#selectedPaciente(name="id_paciente" type="hidden")
          input#selectedPacienteDNI(name="dni_paciente" type="hidden")
          p Paciente seleccionado:
          #selectedPacienteContainer(style="display:none")
            p#selectedPacienteLabel
            button#clearPacienteButton.btn.btn-secondary(type="button") Borrar

        .form-group
          label(for="estado") Estado de la Orden:
          select#estado.form-control(name="estado")
            option(value="ingresada") Ingresada
            option(value="esperando_toma_muestra") Esperando Toma de Muestra
            option(value="analitica") Analítica

        .form-group
          label(for="examenes") Exámenes:
          input#examSearch.form-control(type="text" placeholder="Buscar exámenes...")
          #examResults
          label(for="examenes") Exámenes seleccionados:
          select#examenesSelect.form-control(name="examenesSelect", multiple)
          input#examenesSelectedIds(name="examenesSelectedIds" type="hidden")
          p Doble clic para deseleccionar exámenes

        .form-group
          label(for="tiposMuestra") Tipos de Muestra:
          #tiposMuestraContainer
            // Tipos de muestra generados dinámicamente

        button.btn.btn-primary(type="submit" onclick="return confirm('¿Estás seguro de guardar la orden de trabajo?')") Generar Orden de Trabajo

    script.
      const examenes = !{JSON.stringify(examenes)};
      const pacientes = !{JSON.stringify(pacientes)};

      // Inicializar inputs y contenedores
      const examSearchInput = document.getElementById("examSearch");
      const examResults = document.getElementById("examResults");
      const selectedExams = document.getElementById("examenesSelect");
      const tiposMuestraContainer = document.getElementById("tiposMuestraContainer");

      // Funciones para manejar la lógica dinámica
      function updateTiposMuestra() {
        const selectedExamIds = Array.from(selectedExams.options).map(option => option.value);

        const tiposMuestraRequeridos = new Set();
        selectedExamIds.forEach(id => {
          const examen = examenes.find(examen => examen.id_examen == id);
          if (examen && examen.tipoMuestra) {
            tiposMuestraRequeridos.add(examen.tipoMuestra.tipoDeMuestra);
          }
        });

        tiposMuestraContainer.innerHTML = "";
        tiposMuestraRequeridos.forEach(tipo => {
          const div = document.createElement("div");
          div.className = "form-check";
          div.innerHTML = `
            <input class="form-check-input" type="checkbox" name="tipos_muestra" value="${tipo}" id="${tipo}">
            <label class="form-check-label" for="${tipo}">${tipo}</label>
          `;
          tiposMuestraContainer.appendChild(div);
        });
      }

      // Buscar y seleccionar exámenes
      examSearchInput.addEventListener("input", () => {
        const searchTerm = examSearchInput.value.toLowerCase();
        if (searchTerm === "") {
          examResults.innerHTML = "";
          return;
        }

        const filteredExams = examenes.filter(examen =>
          examen.nombre_examen.toLowerCase().includes(searchTerm)
        );

        examResults.innerHTML = "";
        filteredExams.forEach(examen => {
          const option = document.createElement("option");
          option.value = examen.id_examen;
          option.textContent = `${examen.nombre_examen}`;
          examResults.appendChild(option);
        });
      });

      examResults.addEventListener("click", (event) => {
        if (event.target.tagName === "OPTION") {
          const selectedOption = event.target;

          if (![...selectedExams.options].some(option => option.value === selectedOption.value)) {
            selectedExams.appendChild(selectedOption.cloneNode(true));
          }
          updateTiposMuestra();
          examResults.innerHTML = "";
        }
      });

      selectedExams.addEventListener("dblclick", (event) => {
        if (event.target.tagName === "OPTION") {
          event.target.remove();
          updateTiposMuestra();
        }
      });
