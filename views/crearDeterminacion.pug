extends layout

block content
  head
    title Gestión de Determinaciones

  body
    .container
      h1 Gestión de Determinaciones

      // Selección de examen
      .form-group
        label(for="id_examen") Examen:
        select#id_examen(name="id_examen" class="form-control" required)
          option(value="" disabled selected) Selecciona un examen
          each examen in examenes
            option(value=examen.id_examen) #{examen.nombre_examen} COD: #{examen.codigo} ID: #{examen.id_examen}

      // Contenedor de determinaciones
      .mt-4
        h3#determinationTitle.hidden Deteminaciones para el examen seleccionado:
        p#noDeterminations.hidden No existen determinaciones para el examen seleccionado.

        // Tabla de determinaciones
        table.table.table-bordered.hidden#determinationsTable
          thead
            tr
              th Nombre de la Determinación
              th Valor
              th Unidad de Medida
              th Sexo
              th Estado
              th Acción
          tbody#determinationsBody

      // Botón para agregar una nueva determinación
      button.btn.btn-primary.hidden#addDetermination(type="button") Añadir Nueva Determinación

      // Botón para guardar determinaciones
      button.btn.btn-success.hidden#saveDeterminations(type="button") Guardar Determinaciones

    script.
      const examenes = !{JSON.stringify(examenes)};
      const determinaciones = !{JSON.stringify(determinaciones)};
      const unidadesMedida = !{JSON.stringify(unidadesMedida)};

      const idExamenSelect = document.getElementById("id_examen");
      const determinationTitle = document.getElementById("determinationTitle");
      const noDeterminations = document.getElementById("noDeterminations");
      const determinationsTable = document.getElementById("determinationsTable");
      const determinationsBody = document.getElementById("determinationsBody");
      const addDeterminationButton = document.getElementById("addDetermination");
      const saveDeterminationsButton = document.getElementById("saveDeterminations");

      let currentUnits = []; // Mantiene las unidades filtradas por examen seleccionado

      // Evento al seleccionar un examen
      idExamenSelect.addEventListener("change", () => {
        const idExamen = idExamenSelect.value;
        if (!idExamen) return;

        // Filtrar el examen seleccionado y su idTipoMuestra
        const examenSeleccionado = examenes.find(e => e.id_examen == idExamen);
        if (!examenSeleccionado) return;

        const idTipoMuestra = examenSeleccionado.idTipoMuestra;

        // Filtrar las unidades de medida que coincidan con idTipoMuestra
        currentUnits = unidadesMedida.filter(um => um.idTipoMuestra == idTipoMuestra);

        // Actualizar el título
        determinationTitle.textContent = `Determinaciones para el examen: ${examenSeleccionado.nombre_examen}`;
        determinationTitle.classList.remove("hidden");

        // Filtrar determinaciones por ID de examen
        const examenDeterminations = determinaciones.filter(d => d.id_examen == idExamen);

        // Mostrar u ocultar elementos según las determinaciones
        if (examenDeterminations.length === 0) {
          noDeterminations.classList.remove("hidden");
          determinationsTable.classList.add("hidden");
          addDeterminationButton.classList.remove("hidden");
          saveDeterminationsButton.classList.add("hidden");
        } else {
          noDeterminations.classList.add("hidden");
          determinationsTable.classList.remove("hidden");
          addDeterminationButton.classList.remove("hidden");
          saveDeterminationsButton.classList.remove("hidden");

          determinationsBody.innerHTML = "";
          examenDeterminations.forEach(d => {
            addDeterminationRow(d);
          });
        }
      });

      // Función para agregar una fila de determinación
      function addDeterminationRow(determination = {}) {
        const tr = document.createElement("tr");

        // Generar las opciones del select para unidades de medida filtradas
        const unidadOptions = currentUnits.map(um => `
          <option value="${um.id_UnidadMedida}" ${um.id_UnidadMedida == determination.Unidad_Medida ? "selected" : ""}>
            ${um.nombreUnidadMedida}
          </option>
        `).join("");

        tr.dataset.id = determination.id_Determinacion || ""; // Agregar el id_Determinacion al dataset

        tr.innerHTML = `
          <td><input type="text" class="form-control" value="${determination.Nombre_Determinacion || ''}" name="Nombre_Determinacion" required></td>
          <td><input type="number" step="0.01" class="form-control" value="${determination.Valor || ''}" name="Valor"></td>
          <td>
            <select class="form-control" name="Unidad_Medida" required>
              <option value="" disabled>Selecciona una unidad</option>
              ${unidadOptions}
            </select>
          </td>
          <td>
            <select class="form-control" name="Sexo">
              <option value="M" ${determination.Sexo === 'M' ? 'selected' : ''}>Masculino</option>
              <option value="F" ${determination.Sexo === 'F' ? 'selected' : ''}>Femenino</option>
            </select>
          </td>
          <td>
            <select class="form-control" name="estado">
              <option value="1" ${determination.estado === 1 ? 'selected' : ''}>Activo</option>
              <option value="0" ${determination.estado === 0 ? 'selected' : ''}>Inactivo</option>
            </select>
          </td>
          <td>
            <button type="button" class="btn btn-danger btn-sm remove-determination" onclick="this.closest('tr').remove()">Eliminar</button>
          </td>
        `;

        determinationsBody.appendChild(tr);
      }

      // Evento para agregar nueva fila de determinación
      addDeterminationButton.addEventListener("click", () => {
        addDeterminationRow();
        saveDeterminationsButton.classList.remove("hidden");
      });

      // Evento para guardar las determinaciones
      saveDeterminationsButton.addEventListener("click", async () => {
        const idExamen = idExamenSelect.value;
        const rows = determinationsBody.querySelectorAll("tr");
        const determinaciones = Array.from(rows).map(row => {
          return {
            id_Determinacion: row.dataset.id || null, // Capturar el id si existe
            Nombre_Determinacion: row.querySelector('[name="Nombre_Determinacion"]').value,
            Valor: row.querySelector('[name="Valor"]').value,
            Unidad_Medida: row.querySelector('[name="Unidad_Medida"]').value,
            Sexo: row.querySelector('[name="Sexo"]').value,
            estado: parseInt(row.querySelector('[name="estado"]').value, 10),
          };
        });

        try {
          const response = await fetch(`/determinacion/crear-determinacion/determinaciones`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ id_examen: idExamen, determinaciones }),
          });

          if (response.ok) {
            alert("Determinaciones procesadas con éxito.");
            idExamenSelect.dispatchEvent(new Event("change"));
          } else {
            alert("Error al procesar las determinaciones.");
          }
        } catch (error) {
          console.error("Error al procesar determinaciones:", error);
        }
      });
