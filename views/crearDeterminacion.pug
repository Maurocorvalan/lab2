extends layout

block content
  head
    title Gestión de Determinaciones

  body
    .container
      h1 Gestión de Determinaciones

      // Mostrar el nombre del examen seleccionado
      if idExamenSeleccionado && nombreExamenSeleccionado
        .alert.alert-primary.mt-3
          strong Examen seleccionado: 
          | #{nombreExamenSeleccionado}

      // Selección de examen (deshabilitado si viene idExamenSeleccionado)
      .form-group.mt-3
        label(for="id_examen") Examen:
        select#id_examen(name="id_examen" class="form-control" required disabled=(idExamenSeleccionado ? true : false))
          option(value="" disabled selected=!idExamenSeleccionado) Selecciona un examen
          each examen in examenes
            option(value=examen.id_examen selected=(examen.id_examen == idExamenSeleccionado ? 'selected' : false))
              | ID: #{examen.id_examen} Examen: #{examen.nombre_examen} COD: #{examen.codigo}

      // Contenedor de determinaciones
      .mt-4
        h3#determinationTitle.hidden Deteminaciones para el examen seleccionado:
        p#noDeterminations.hidden No existen determinaciones para el examen seleccionado.

        // Tabla de determinaciones
        table.table.table-bordered.hidden#determinationsTable
          thead
            tr
              th Nombre de la Determinación
              th Valor
              th Unidad de Medida
              th Sexo
              th Estado
              th Acción
          tbody#determinationsBody

      // Botón para agregar una nueva determinación
      button.btn.btn-primary.hidden#addDetermination(type="button") Añadir Nueva Determinación

      // Botón para guardar determinaciones
      button.btn.btn-success.hidden#saveDeterminations(type="button") Guardar Determinaciones

      // Modal de confirmación
      .modal#confirmationModal(tabindex="-1" role="dialog" aria-hidden="true")
        .modal-dialog(role="document")
          .modal-content
            .modal-header
              h5.modal-title Confirmación de Datos
              button.close(type="button" data-bs-dismiss="modal" aria-label="Close")
                span(aria-hidden="true") &times;
            .modal-body
              p#modalContent Aquí aparecerán los datos a enviar.
            .modal-footer
              button.btn.btn-secondary(type="button" data-bs-dismiss="modal") Cancelar
              button.btn.btn-primary(type="button" id="confirmSubmit") Confirmar

    script.
      // Datos cargados desde el servidor
      const examenes = !{JSON.stringify(examenes)};
      const determinaciones = !{JSON.stringify(determinaciones)};
      const unidadesMedida = !{JSON.stringify(unidadesMedida)};
      const idExamenSeleccionado = !{JSON.stringify(idExamenSeleccionado || null)};
      const nombreExamenSeleccionado = !{JSON.stringify(nombreExamenSeleccionado || null)};

      // Elementos del DOM
      const idExamenSelect = document.getElementById("id_examen");
      const determinationTitle = document.getElementById("determinationTitle");
      const noDeterminations = document.getElementById("noDeterminations");
      const determinationsTable = document.getElementById("determinationsTable");
      const determinationsBody = document.getElementById("determinationsBody");
      const addDeterminationButton = document.getElementById("addDetermination");
      const saveDeterminationsButton = document.getElementById("saveDeterminations");

      let currentUnits = []; // Mantiene las unidades filtradas por examen seleccionado
      let currentDeterminations = []; // Determinaciones actuales del examen seleccionado

      // Preseleccionar examen si se pasa idExamenSeleccionado
      if (idExamenSeleccionado) {
        idExamenSelect.value = idExamenSeleccionado;
        updateDeterminations(idExamenSeleccionado);
      }

      // Evento al seleccionar un examen (solo si no hay un examen preseleccionado)
      if (!idExamenSeleccionado) {
        idExamenSelect.addEventListener("change", () => {
          const idExamen = idExamenSelect.value;
          if (!idExamen) {
            resetDeterminations();
            return;
          }

          updateDeterminations(idExamen);
        });
      }

      // Actualizar determinaciones según el examen seleccionado
      function updateDeterminations(idExamen) {
        const examenSeleccionado = examenes.find(e => e.id_examen == idExamen);
        if (!examenSeleccionado) return;

        const idTipoMuestra = examenSeleccionado.idTipoMuestra;

        // Filtrar las unidades de medida por idTipoMuestra
        currentUnits = unidadesMedida.filter(um => um.idTipoMuestra == idTipoMuestra);

        // Filtrar determinaciones por examen seleccionado
        currentDeterminations = determinaciones.filter(d => d.id_examen == idExamen);

        // Actualizar el título
        determinationTitle.textContent = `Determinaciones para el examen: ${examenSeleccionado.nombre_examen}`;
        determinationTitle.classList.remove("hidden");

        determinationsBody.innerHTML = "";

        if (currentDeterminations.length === 0) {
          noDeterminations.classList.remove("hidden");
          determinationsTable.classList.add("hidden");
          addDeterminationButton.classList.remove("hidden");
          saveDeterminationsButton.classList.add("hidden");
        } else {
          noDeterminations.classList.add("hidden");
          determinationsTable.classList.remove("hidden");
          addDeterminationButton.classList.remove("hidden");
          saveDeterminationsButton.classList.remove("hidden");

          currentDeterminations.forEach(d => {
            addDeterminationRow(d);
          });
        }
      }

      // Restablecer determinaciones
      function resetDeterminations() {
        determinationTitle.classList.add("hidden");
        noDeterminations.classList.add("hidden");
        determinationsTable.classList.add("hidden");
        addDeterminationButton.classList.add("hidden");
        saveDeterminationsButton.classList.add("hidden");
        determinationsBody.innerHTML = "";
      }

      // Función para agregar una fila de determinación
      function addDeterminationRow(determination = {}) {
        const tr = document.createElement("tr");

        const unidadOptions = currentUnits.map(um => `
          <option value="${um.id_UnidadMedida}" ${um.id_UnidadMedida == determination.Unidad_Medida ? "selected" : ""}>
            ${um.nombreUnidadMedida}
          </option>
        `).join("");

        tr.dataset.id = determination.id_Determinacion || "";

        tr.innerHTML = `
          <td><input type="text" class="form-control" value="${determination.Nombre_Determinacion || ''}" name="Nombre_Determinacion" required></td>
          <td><input type="number" step="0.01" class="form-control" value="${determination.Valor || ''}" name="Valor" required></td>
          <td>
            <select class="form-control" name="Unidad_Medida" required>
              <option value="" disabled ${!determination.Unidad_Medida ? 'selected' : ''}>Selecciona una unidad</option>
              ${unidadOptions}
            </select>
          </td>
          <td>
            <select class="form-control" name="Sexo" required>
              <option value="" disabled ${!determination.Sexo ? 'selected' : ''}>Selecciona un sexo</option>
              <option value="M" ${determination.Sexo === 'M' ? 'selected' : ''}>Masculino</option>
              <option value="F" ${determination.Sexo === 'F' ? 'selected' : ''}>Femenino</option>
            </select>
          </td>
          <td>
            <select class="form-control" name="estado" required>
              <option value="" disabled ${determination.estado === undefined ? 'selected' : ''}>Selecciona un estado</option>
              <option value="1" ${determination.estado === 1 ? 'selected' : ''}>Activo</option>
              <option value="0" ${determination.estado === 0 ? 'selected' : ''}>Inactivo</option>
            </select>
          </td>
          <td>
            <button type="button" class="btn btn-danger btn-sm remove-determination" 
                    onclick="this.closest('tr').remove()">Eliminar</button>
          </td>
        `;

        determinationsBody.appendChild(tr);
      }

      // Evento para agregar nueva fila
      addDeterminationButton.addEventListener("click", () => {
        addDeterminationRow();
        noDeterminations.classList.add("hidden");
        determinationsTable.classList.remove("hidden");
        saveDeterminationsButton.classList.remove("hidden");
      });

      // Evento para guardar determinaciones con modal de confirmación
      saveDeterminationsButton.addEventListener("click", () => {
        const rows = determinationsBody.querySelectorAll("tr");
        const determinaciones = Array.from(rows).map(row => ({
          id_Determinacion: row.dataset.id || null,
          Nombre_Determinacion: row.querySelector('[name="Nombre_Determinacion"]').value,
          Valor: row.querySelector('[name="Valor"]').value,
          Unidad_Medida: row.querySelector('[name="Unidad_Medida"]').value,
          Sexo: row.querySelector('[name="Sexo"]').value,
          estado: parseInt(row.querySelector('[name="estado"]').value, 10),
        }));

        const modalContent = determinaciones.map((det, index) => `
          <strong>Determinación ${index + 1}:</strong><br>
          Nombre: ${det.Nombre_Determinacion}<br>
          Valor: ${det.Valor}<br>
          Unidad de Medida: ${det.Unidad_Medida}<br>
          Sexo: ${det.Sexo}<br>
          Estado: ${det.estado === 1 ? "Activo" : "Inactivo"}<br><br>
        `).join("");

        document.getElementById("modalContent").innerHTML = modalContent;

        // Mostrar modal
        $('#confirmationModal').modal('show');
      });

      document.getElementById("confirmSubmit").addEventListener("click", async () => {
        const idExamen = idExamenSelect.value;
        const rows = determinationsBody.querySelectorAll("tr");
        const determinaciones = Array.from(rows).map(row => ({
          id_Determinacion: row.dataset.id || null,
          Nombre_Determinacion: row.querySelector('[name="Nombre_Determinacion"]').value,
          Valor: row.querySelector('[name="Valor"]').value,
          Unidad_Medida: row.querySelector('[name="Unidad_Medida"]').value,
          Sexo: row.querySelector('[name="Sexo"]').value,
          estado: parseInt(row.querySelector('[name="estado"]').value, 10),
        }));

        try {
          const response = await fetch(`/determinacion/crear-determinacion/determinaciones`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ id_examen: idExamen, determinaciones }),
          });

          if (response.ok) {
            alert("Determinaciones guardadas con éxito.");
            idExamenSelect.dispatchEvent(new Event("change"));
          } else {
            alert("Error al guardar las determinaciones.");
          }
        } catch (error) {
          console.error("Error al guardar las determinaciones:", error);
        }
      });
