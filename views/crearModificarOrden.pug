extends layout

block content
  head
    title Modificar Orden de Trabajo

  body
    .container
      h1(class="margin-top-custom") Modificar Orden de Trabajo

      form#modificar-orden-form(action=`/buscarOrdenes/crear-modificar-orden/${orden.id_Orden}` method="POST")
        .form-group
          label(for="paciente") Paciente:
          p Paciente preseleccionado:
          p #{paciente.nombre} #{paciente.apellido} (DNI: #{orden.dni})
          input(type="hidden" name="id_paciente" value=orden.id_Paciente)
          input(type="hidden" name="dni_paciente" value=orden.dni)

        .form-group
          label(for="estado") Estado de la Orden:
          select#estado.form-control(name="estado")
            option(value="esperando_toma_muestra", selected=orden.estado === 'esperando_toma_muestra') Esperando Toma de Muestra
            option(value="analitica", selected=orden.estado === 'analitica') Analítica
            option(value="cancelada", selected=orden.estado === 'cancelada') Cancelada

        // Exámenes existentes y selección de nuevos
        .form-group
          label(for="examenes") Exámenes:
          input#examSearch.form-control(type="text" placeholder="Buscar exámenes...")
          ul#examResults.list-group
          label(for="examenes") Exámenes seleccionados:
          select#examenesSelect.form-control(name="examenesSelect", multiple)
            if orden.ordenes_examenes
              each examen in orden.ordenes_examenes
                option(value=examen.Examen.id_examen selected)= examen.Examen.nombre_examen
          input#examenesSelectedIds(name="examenesSelectedIds" type="hidden" value=(orden.ordenes_examenes ? orden.ordenes_examenes.map(e => e.Examen.id_examen).join(',') : ''))

        // Muestras asociadas
        .form-group
          label(for="tiposMuestra") Tipos de Muestra:
          #tiposMuestraContainer
            if orden.Muestras && orden.Muestras.length > 0
              each muestra in orden.Muestras
                .form-check
                  input.form-check-input(type="checkbox" name="tipos_muestra" value=muestra.idTipoMuestra checked)
                  label.form-check-label(for=muestra.idTipoMuestra)= muestra.Tipo_Muestra
            else
              p No se encontraron muestras asociadas.

        // Botones
        button.btn.btn-primary(type="submit" onclick="return confirm('¿Estás seguro de guardar la orden de trabajo?')") Guardar Orden de Trabajo

    script.
      const examenes = !{JSON.stringify(examenes)};
      const examSearchInput = document.getElementById("examSearch");
      const examResults = document.getElementById("examResults");
      const selectedExams = document.getElementById("examenesSelect");
      const examenesSelectedIdsInput = document.getElementById("examenesSelectedIds");
      const tiposMuestraContainer = document.getElementById("tiposMuestraContainer");

      // Buscar y seleccionar exámenes
      examSearchInput?.addEventListener("input", () => {
        const searchTerm = examSearchInput.value.trim().toLowerCase();

        if (!searchTerm) {
          examResults.innerHTML = ""; // Limpiar si no hay término de búsqueda
          return;
        }

        const filteredExams = examenes.filter(examen =>
          examen.nombre_examen.toLowerCase().includes(searchTerm)
        );

        examResults.innerHTML = ""; // Limpiar resultados anteriores
        filteredExams.forEach(examen => {
          const li = document.createElement("li");
          li.className = "list-group-item";
          li.textContent = examen.nombre_examen;
          li.dataset.idExamen = examen.id_examen;

          li.addEventListener("click", () => {
            if (![...selectedExams.options].some(option => option.value == li.dataset.idExamen)) {
              const option = document.createElement("option");
              option.value = li.dataset.idExamen;
              option.textContent = li.textContent;
              selectedExams.appendChild(option);
            }
            updateExamenesSelectedIds();
            examResults.innerHTML = ""; // Limpiar después de seleccionar
          });

          examResults.appendChild(li);
        });
      });

      // Doble clic para eliminar exámenes seleccionados
      selectedExams?.addEventListener("dblclick", (event) => {
        if (event.target.tagName === "OPTION") {
          event.target.remove();
          updateExamenesSelectedIds();
        }
      });

      // Actualizar campo oculto de IDs de exámenes seleccionados
      function updateExamenesSelectedIds() {
        const selectedIds = Array.from(selectedExams.options).map(option => option.value);
        examenesSelectedIdsInput.value = selectedIds.join(",");
      }
