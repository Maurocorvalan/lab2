extends layout

block content
  .container.margin-top-custom
    head 
      title Muestras

    // Mostrar mensajes flash si existen
    if success_msg
      .alert.alert-success#success-msg #{success_msg}
    else if error_msg
      .alert.alert-danger#error-msg #{error_msg}

    h1 Muestras de la Orden #{id_orden}

    if muestras
      .row.row-cols-1.row-cols-md-3
        each muestra in muestras
          .col.mb-4
            .card
              .card-body
                ul.list-unstyled
                  li Id Muestra: #{muestra.id_Muestra}
                  li Id Orden: #{muestra.id_Orden}
                  li Id Paciente: #{muestra.id_Paciente}
                  li Nombre Paciente: #{muestra.Paciente.nombre} #{muestra.Paciente.apellido}
                  li Tipo de Muestra: #{muestra.Tipo_Muestra}
                  li Fecha de Recepción: #{muestra.Fecha_Recepcion ? muestra.Fecha_Recepcion.toLocaleString('es-AR') : ''}
                  li
                    form(method="POST", action=`/muestras/actualizarEstado/${muestra.id_Muestra}`)
                      label(for="estado") Estado:
                      select.form-control(name="estado" id="estado")
                        option(value="analitica" selected=muestra.estado === 'analitica') Analítica
                        option(value="esperando toma de muestra" selected=muestra.estado === 'esperando toma de muestra') Esperando toma de Muestra
                      button.btn.btn-secondary(type="submit") Modificar Muestra
                a.btn.btn-primary(href=`/muestras/mostrar/aniadirResultados/${muestra.id_Muestra}`) Añadir Resultados
                button.btn.btn-success(type="button", onclick=`generarPDF('${muestra.id_Muestra}', '${id_orden}')`) Imprimir
    else
      p #{mensaje}

    // Botón estilizado para validar orden de trabajo
    .text-center
      form(method="POST", action=`/muestras/actualizarEstadoOrden/${id_orden}`)
        button.btn.btn-warning.btn-lg(type="submit") Enviar a validar

  script.
    document.addEventListener('DOMContentLoaded', function () {
      // Obtener elementos de alerta
      const successMsg = document.getElementById('success-msg');
      const errorMsg = document.getElementById('error-msg');

      // Función para ocultar mensajes después de un período de tiempo
      function hideMessage(element) {
        if (element) {
          // Verificar si es la primera visita
          const isFirstVisit = localStorage.getItem('firstVisit') === null;
          const hideTime = isFirstVisit ? 0 : 8000; // 0 segundos en la primera visita

          setTimeout(() => {
            element.style.display = 'none';
          }, hideTime); 
        }
      }

      // Almacenar marca de visita si es la primera vez
      if (localStorage.getItem('firstVisit') === null) {
        localStorage.setItem('firstVisit', 'true');
      }

      // Ocultar mensajes si están presentes
      hideMessage(successMsg);
      hideMessage(errorMsg);
    });

    async function generarPDF(idMuestra, idOrden) {
      try {
        const info = await fetch(`/muestras/${idOrden}/generarPDFMuestra/${idMuestra}`);
        if (!info.ok) {
          throw new Error(`HTTP error! Status: ${info.status}`);
        }

        const { pdfBase64 } = await info.json();

        // Crear un objeto blob desde el PDF base64
        const byteCharacters = atob(pdfBase64);
        const byteNumbers = new Array(byteCharacters.length);
        for (let i = 0; i < byteCharacters.length; i++) {
          byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        const blob = new Blob([byteArray], { type: 'application/pdf' });

        // Crear una URL del blob para mostrar el PDF en el navegador
        const url = URL.createObjectURL(blob);

        // Abrir una nueva ventana o mostrar el PDF en un iframe
        window.open(url, '_blank');

      } catch (error) {
        console.error('Error al generar PDF:', error);
        alert('Error al generar PDF.');
      }
    }
